[Title]
ACM的组队Extra

[Description]
题目的背景见 BOJ1094 ACM的组队 http://acm.scs.bupt.cn/onlinejudge/showproblem.php?problem_id=1094
不过，在Mr. F和诸位前辈的努力下，BUPT的ACM事业蒸蒸日上，越来越多的同学想要组队参加比赛来享受ACM的乐趣了！这可急坏了Mr. F，因为这一次，想要组队的人数非常多，他想尽快地完成组队工作。
为了方便计算，Mr. F重新定义队伍质量的衡量方法：m=min{|a-b|,|b-c|,|a-c|}。最优组队的方式仍然是使所有队伍的m之和M最小。

[Input]
第一行包含两个整数N, K，分别表示队员的数目，和需要组建的队伍数。
接下来N行，每行一个整数D(0<=D<=1000000000)，表示每个队员的失误值。
3<=N<=100000，0<K<=[N/3]。

[Output]
输出一行，仅一个整数，为最优组队方案的M。

[Sample Input]
7 2
1
5
3
2
4
7
9

[Sample Output]
2

[Limit]
Time Limit=4000ms
Memory Limit=65536k

[Data Range]
0 <= 失误值 <= 10^9
3 <= N <= 100000
0 < K <= [N/3]
所有数据保证在int范围

----------------------------------------------------------------

[Summary]
给出一个序列（排序后相邻失误值的差），从中选K个数，保证其两两不相邻，问这K个数的和最小是多少。

[Algorithm]
Heap, Greed

[Solution]
1094的标准做法是背包。不过看到此题时我首先想到的不是背包，而是APIO2007的第二题Backup，将失误值排序后，二者几乎是等价的（除了代价变为差值的平方）。
当时做Backup时第一想到的也是O(NK)的背包，不过由于数据范围太大所以必定超时。后来从时间复杂度的角度，想到对贪心解进行改造。具体想法如下：
（为了方便叙述，直接引用Backup的题目Sample，先忽略K <= [N/3]这个条件）
5 2
1
3
4
6
12
这组数据转换后得到序列
2 1 2 10
一般的贪心解选择1和10，是错的，现在考虑贪心解在什么情况下可能出错。
对于第一次选择的某个贪心解D[s]，当D[s-1]+D[s+1]<D[s]+D[i]（其中i为与s不相邻的点）时无法保证贪心解的始终正确，即D[s-1]+D[s+1]-D[s]<D[i]时贪心解出错。对于Sample有s=2，i=4。
更一般地，以o表示不选，x表示选。则最后的解必定是若干oxoxo...oxo（不妨称为区间），中间相隔若干o的结构。对于某个区间，若贪心解出错，则
sigma{D[o（该区间不选的点）]} < sigma{D[x（该区间选的点）]} + (sigma{D[另一个区间不选的点]}-sigma{D[另一个区间选的点]}（单独的一个点视为一个区间）)
即sigma{D[该区间的o]}-sigma{D[该区间的x]} < sigma{D[另一个区间的o]}-sigma{D[另一个区间的x]}
左右两边的代价都是相当于对某个区间进行了“翻转”。
到这里就可以看出一些端倪。如果我们贪心选择（或“翻转”某个区间）后不删除某个点/区间，而是把它和两边的点/区间合并，区间代价为 左区间代价+右区间代价-该区间代价 = (sigma{D[左区间o]}-sigma{D[左区间x]})+(sigma{D[右区间o]}-sigma{D[右区间x]})-(sigma{D[该区间o]}-sigma{D[该区间x]}) = “翻转”合并后区间的代价。则若此次贪心出错，当且仅当“翻转”的代价在下一次贪心时是最小的。此时让Ans += “翻转”的代价，既保证了解的最优，也保证了整体结构的不变（这段结合数学归纳法想下应该不难看懂）。
综上，D[i]表示第i个区间的权。用最小堆维护D[i]。每次取出堆顶元素，删除堆顶元素左右两个区间的元素，将左区间权值+右区间权值-堆顶元素权值入堆。特别地，若区间在最左或最右则确认其为最优解不用删除。
较严格的证明是再做1094想到的，可以把题目抽象成最小费用最大流，利用了图的特殊性质进行了优化。具体证明写起来很麻烦且要画图，可以参考这两个页面：

http://boj.5d6d.com/thread-361-1-1.html
http://hi.baidu.com/edwardmj/blog/item/085f9b0d956ce7266059f3d3.html

[Appendix]
附上1094的程序和APIO2007的题目。std和1094仅仅是范围和代价的表达式有差别。
